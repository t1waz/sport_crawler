version: "3.9"

x-restart-policy: &restart_policy
  restart: always

volumes:
  db_data: {}
  scrapyd_deploy: {}

networks:
  sport_spotter:


services:
  admin:
    <<: *restart_policy
    build:
      context: .
      dockerfile: compose/admin/Dockerfile
    command: uvicorn admin.main:app --port 8000 --host 0.0.0.0 --reload
    volumes:
      - ./services:/app
    env_file:
      - .envs
    ports:
      - 0.0.0.0:8000:8000
    depends_on:
      db:
        condition: service_healthy
    networks:
      - sport_spotter

  scraper: &scraper
    build:
      context: .
      dockerfile: compose/scraper/Dockerfile
    volumes:
      - ./services:/app
    env_file:
      - .envs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
#      crawler-deploy:
#        condition: service_completed_successfully
    networks:
      - sport_spotter

  scraper-master:
    <<: [*scraper, *restart_policy]
    command: python3 scraper/master.py

  scraper-worker:
    <<: [*scraper, *restart_policy]
    command: python3 scraper/worker.py

  crawler: &crawler
    <<: *restart_policy
    build:
      context: .
      dockerfile: compose/crawler/Dockerfile
    command: scrapyd
    ports:
      - 0.0.0.0:8888:6800
    volumes:
      - scrapyd_deploy:/app
      - ./services/common:/app/common
    env_file:
      - .envs
    networks:
      - sport_spotter

  crawler-deploy:
    <<: *crawler
    restart: no
    command: bash -c "scrapyd-deploy --build-egg=/dev/null
                      && scrapyd-deploy docker -p crawler
                      && rm -r build
                      && rm -r project.egg-info"
    volumes:
      - ./services/crawler:/app
    ports:
      - 8889:6800

  db:
    <<: *restart_policy
    image: postgres:15-alpine
    volumes:
      - db_data:/var/lib/postgresql/data
    env_file:
      - .envs
    ports:
      - "45432:5432"
    healthcheck:
      test: pg_isready -U postgres -d postgres -h db -p 5432
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - sport_spotter

  redis:
    <<: *restart_policy
    build:
      context: .
      dockerfile: compose/redis/Dockerfile
    command: sh -c "redis-server /config/redis.conf && redis-cli flushall"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    env_file:
      - .envs
    sysctls:
      net.core.somaxconn: '511'
    networks:
      - sport_spotter
