version: "3.9"

x-restart-policy: &restart_policy
  restart: always

volumes:
  db_data: {}
  grafana_data: {}
  scrapyd_deploy: {}

networks:
  sport_spotter:


services:
#  grafana:
#    <<: *restart_policy
#    image: grafana/grafana-enterprise
#    volumes:
#      - grafana_data:/var/lib/grafana
#    ports:
#     - '0.0.0.0:3000:3000'
#    networks:
#      - sport_spotter

  scraper: &scraper
    build:
      context: .
      dockerfile: compose/scraper/Dockerfile
    volumes:
      - ./services:/app
    env_file:
      - .envs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sport_spotter

  collector-worker:
    <<: [*scraper, *restart_policy]
    command: python3 collector/worker.py

  collector-server:
    <<: [*scraper, *restart_policy]
    command: python3 collector/server.py

  db:
    <<: *restart_policy
    image: postgres:15-alpine
    volumes:
      - db_data:/var/lib/postgresql/data
    env_file:
      - .envs
    healthcheck:
      test: pg_isready -U postgres -d postgres -h db -p 5432
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - sport_spotter

  redis:
    <<: *restart_policy
    build:
      context: .
      dockerfile: compose/redis/Dockerfile
    command: sh -c "redis-server /config/redis.conf && redis-cli flushall"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    env_file:
      - .envs
    sysctls:
      net.core.somaxconn: '511'
    networks:
      - sport_spotter
